COMPILER Coconut

CHARACTERS
    digit = '0'..'9'.
    letter = 'a'..'z'+'A'..'Z'.

TOKENS
    number = digit{digit}.
    float = digit{digit}'.'{digit}.
    id = letter{letter|digit|'_'}.

IGNORE "\n"
PRODUCTIONS
   Coconut
   = function
   {
   function
   }.
   
   function				(. String functionName = null;.)
   = "function" id 		(. System.out.println("Creating function '" + t.val +"'"); functionName = t.val; .)
    "()" "{"
     basicBlock
     {
        basicBlock
     }
     "}"				(. astGenerator.createFunctionNode(functionName); .)
     .

   basicBlock			(. FrameSlot str; .)
   = instr ";"
     {
       (instr | var<out str>) ";"
     }.

   instr			(. CoconutExpressionNode n1, n2; String str; .)
   = value <out n1>
     {
       op <out str> value <out n2>	(. astGenerator.createBinaryInstruction(str, n1, n2); .)
     }.

   op <out String o>	(. o = null; .)
   =  ( arithOp <out o> | shiftOp <out o> )
   .

   arithOp <out String o>
   = ( '+' | '-' | '*' | '%' | '/' )  (. o = t.val; .)
   .

   shiftOp <out String o>
   = ( "<<" | ">>" )		(. o = t.val; .)
   .

   value <out CoconutExpressionNode node>	(. node = null; CoconutExpressionNode n1 = null; .)
   = ['+'] unsignedValue <out node>	
   | '-' unsignedValue <out n1>			(. node = CoconutMulNodeGen.create(n1, astGenerator.createNode(-1));.)
   .

   unsignedValue <out CoconutExpressionNode node>	(. node = null; int n1; float n2; .)
   = intValue <out n1>				(. node = astGenerator.createNode(n1); .)
   | floatValue <out n2>			(. node = astGenerator.createNode(n2);.)
   .

   intValue <out int n>   (. n = 0; .)
   = number      (. n = Integer.parseInt(t.val); .)
    .

    floatValue <out float n>	(. n = 0.0f; .)
    = float		(. n = Float.parseFloat(t.val); .)
    .

	var <out FrameSlot slot>			(. slot = null; .)
	= id						(. slot = astGenerator.createVariable(t.val); 
								   System.out.println("Variable '" + t.val + "' found");
								.)
	.
END Coconut.
